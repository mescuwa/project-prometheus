"""ReportSynthesizerAgent
========================

An agent dedicated to crafting a comprehensive scientific report from all
structured data produced throughout the Prometheus autonomous discovery run.
The agent relies on a large-context language model ( Pro) to turn a
massive prompt – comprising live research briefs, experiment history, and
mission metadata – into a well-structured Markdown manuscript.
"""

from __future__ import annotations

import logging
from pathlib import Path
from typing import List

from prometheus.models import ExperimentLog
from prometheus.llm_utils import call_gemini

logger = logging.getLogger(__name__)


class ReportSynthesizerAgent:
    """Synthesises a final scientific paper from Prometheus outputs."""

    def __init__(self) -> None:
        logger.info("ReportSynthesizerAgent initialised.")

    async def generate_report(  # pylint: disable=too-many-branches
        self,
        *,
        config: dict,
        mission_params: dict,
        experiment_history: List[ExperimentLog],
        research_briefs: List[str],
    ) -> str:
        """Generate a Markdown research paper.

        Parameters
        ----------
        mission_params
            A dictionary of high-level mission parameters (pdb_id, targets, …).
        experiment_history
            Chronological list of `ExperimentLog` entries – one per cycle.
        research_briefs
            Ordered list of research briefs generated by `ResearchAgent`.

        Returns
        -------
        str
            The rendered Markdown document, or a fallback error string.
        """

        logger.info("Synthesising final scientific report …")

        # ------------------------------------------------------------------
        # 0. Extract run configuration parameters for prompt context.
        # ------------------------------------------------------------------
        scoring_weights: dict = config.get("scoring", {}) if config else {}
        md_cfg: dict = config.get("md_simulation", {}) if config else {}
        research_cfg: dict = config.get("research_agent", {}) if config else {}

        # ------------------------------------------------------------------
        # 1. Collate experiment history into a human-readable summary.
        # ------------------------------------------------------------------
        history_summary: list[str] = []
        for log in experiment_history:
            entry = (
                f"### Cycle {log.cycle} – Composite Score: {log.composite_score:.3f}\n"
                f"- **Molecule SMILES:** `{log.smiles}`\n"
                f"- **Binding Affinity:** {log.average_binding_affinity:.3f} ± {log.std_dev_binding_affinity:.3f} kcal/mol\n"
                f"- **QED:** {log.qed:.3f}\n"
                f"- **SA Score:** {log.sa_score:.3f}\n"
                f"- **AI Reasoning:** {log.reasoning}\n"
            )
            if getattr(log, "image_path", None):
                entry += f"- **Image File:** `{log.image_path}`\n"
            history_summary.append(entry)
        history_section = "\n\n".join(history_summary)

        # ------------------------------------------------------------------
        # 2. Consolidate research briefs.
        # ------------------------------------------------------------------
        research_section = "\n\n---\n\n".join(research_briefs)

        # ------------------------------------------------------------------
        # 3. Build the mega-prompt.
        # ------------------------------------------------------------------
        pdb_id: str | None = mission_params.get("pdb_id")  # type: ignore[assignment]

        prompt = f"""
You are an **AI Scientific Communicator**. Your task is to draft a formal research
paper that summarises the findings of an autonomous *de-novo* drug-discovery
campaign conducted by the AI scientist *Prometheus*.

## Mission Objective
Design a novel molecule based on the Erlotinib scaffold (PDB ID: {pdb_id}) that
overcomes the EGFR T790M resistance mutation and achieves an improved multi-
objective composite score.

## Methodology (High-Level)

**Run Configuration:**
- Scoring Weights: Affinity({scoring_weights.get('w_affinity', 'N/A')}), QED({scoring_weights.get('w_qed', 'N/A')}), SA_Score({scoring_weights.get('w_sa_score', 'N/A')})
- MD Validation: {'Enabled (Quick Test Mode)' if md_cfg.get('quick_test') else 'Enabled'} | Steps: {md_cfg.get('quick_test_steps' if md_cfg.get('quick_test') else 'simulation_steps', 'N/A')}
- Live Research: {'Enabled' if research_cfg.get('enabled') else 'Disabled (Static KB)'}

During each discovery cycle Prometheus executed the following pipeline:
1. **ResearchAgent** – performed focused scientific web searches to collect
   up-to-date knowledge (no direct chemical-database crawling).
2. **HypothesisAgent** – generated a batch of candidate SMILES strings.
3. **ExperimenterAgent** – ran *Smina* docking screens and calculated property
   scores (QED, SA Score, LogP).
4. **ValidatorAgent / MDValidatorAgent** – validated the lead candidate via MD
   simulations if it passed initial filters.
5. **ScoringAgent** – combined metrics into a single composite score.

---
### Consolidated Research Briefs
{research_section}
---
### Cycle-by-Cycle Experimental Log
{history_section}
---

## Your Task
Write a comprehensive scientific paper in **Markdown** based *only* on the data
provided above. The manuscript **must** contain the following sections:

1. **Abstract** – concise overview of goals, methods, and key results.
2. **Introduction** – relevant background on EGFR, Erlotinib, the T790M resistance
   issue, and the overall mission objective.
3. **Methods** – briefly describe the autonomous workflow *as it was executed in this campaign*, based **only** on the provided data logs and agent descriptions (do **not** invent additional capabilities such as patent mining or database crawling).
4. **Results and Discussion** – this is the critical section and should follow
   the guidelines below:
   - Begin with a **Markdown table** that summarises the key data for every
     *validated* molecule. The table columns **must** be:
       *Cycle* | *Molecule SMILES* | *Avg. Binding Affinity (kcal/mol)* |
       *QED* | *SA Score* | *Composite Score*
   - After the table, present a chronological narrative that analyses how the
     AI refined its design strategy from cycle to cycle (e.g., "Covalent
     Strategy Pivot", "Scaffold Rigidification"), referencing molecules by their
     SMILES in back-tick code blocks.
   - **IMPORTANT:** Whenever you discuss a specific molecule from a cycle, you
     **MUST embed its corresponding image** using Markdown syntax:
     `![Caption text](image/file/path.png)` – use the *Image File* path provided
     for that cycle. Include at least the baseline molecule and the final
     champion molecule as figures.
   - Explicitly highlight both setbacks and improvements, explaining how
     Prometheus learned from each outcome.
   - Conclude this section by dissecting the final champion molecule and why it
     outperforms the baseline.
5. **Conclusion** – key findings, limitations, and next steps.

### Formatting Guidelines
- You **must** include the summary data table at the start of the *Results and
  Discussion* section.
- You **must** embed images for key molecules using their provided file paths
  (`![Caption](path/to/image.png)`).
- Use proper Markdown headings (`#`, `##`, ...) and sub-headings.
- Whenever a molecule is mentioned, include its SMILES string in a back-tick
  code block: `CCO...`.
- Embed links sparingly and only when they correspond to provided data.
- Maintain a formal, objective scientific tone throughout.
"""

        # ------------------------------------------------------------------
        # 4. Invoke the LLM.
        # ------------------------------------------------------------------
        logger.info("Calling Gemini 2.5 Pro to draft the manuscript – this may take a while …")
        try:
            # Select LLM model from config if available
            model_name = (
                config.get("llm_models", {}).get("report_model", "gemini-2.5-pro")
                if config else "gemini-2.5-pro"
            )

            response = await call_gemini(
                prompt=prompt,
                model_name=model_name,
                temperature=0.4,
                max_output_tokens=65536,
            )
            if response.get("error"):
                logger.error("LLM returned an error: %s", response["message"])
                return "Failed to generate report due to an LLM error."

            return response.get("raw_text_output", "(empty LLM response)")
        except Exception as exc:  # pylint: disable=broad-except
            logger.error("Exception during report generation: %s", exc, exc_info=True)
            return "Failed to generate report due to an unexpected exception."